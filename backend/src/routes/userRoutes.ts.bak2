import { Router, Request, Response } from 'express';
import { body, validationResult } from 'express-validator';
import { getDatabase } from '../database/connection';
import { logger } from '../utils/logger';
import { authenticate, authorize, AuthenticatedRequest } from '../middleware/auth';
import { UserProfile, UserRole } from '../types/enhanced';

const router = Router();

// Validation rules
const updateProfileValidation = [
  body('bio').optional().isLength({ max: 1000 }).withMessage('Bio must be less than 1000 characters'),
  body('experienceYears').optional().isInt({ min: 0, max: 50 }).withMessage('Experience years must be between 0 and 50'),
  body('specializations').optional().isArray().withMessage('Specializations must be an array'),
  body('rank').optional().isString().withMessage('Rank must be a string'),
  body('unit').optional().isString().withMessage('Unit must be a string'),
  body('achievements').optional().isArray().withMessage('Achievements must be an array'),
  body('hourlyRate').optional().isFloat({ min: 0 }).withMessage('Hourly rate must be a positive number'),
  body('availability').optional().isArray().withMessage('Availability must be an array')
];

// GET /api/users/profile - Get current user profile
router.get('/profile', authenticate, async (req: AuthenticatedRequest, res: Response): Promise<void> => {
  try {
    if (!req.user) {
      res.status(401).json({
        success: false,
        error: 'User not authenticated',
        timestamp: new Date().toISOString()
      });
      return;
    }

    logger.info(`Getting user profile for: ${req.user.email}`);
    
    res.json({
      success: true,
      data: req.user,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    logger.error('Error getting user profile:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to get user profile',
      timestamp: new Date().toISOString()
    });
  }
});

export default router;
